shiny::runApp()
runApp()
runApp()
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
faithful
bins <- seq(min(x), max(x), length.out = input$bins + 1)
library(readr)
data <- read_csv("C:/Sync/Sauve/MUN Postdoc/DataSimulation_RBarLME4.csv")
View(data)
#======================================================================================================================================================
#Install and load lme4 package
#install.packages("lme4")
library("lme4")
library("tidyverse")
library("gganimate")
intercept <- lm(RT ~ 1, data = data)
#Let's look at this model
summary(intercept)
fixed <- lm(RT ~ 1 + Category, data = data)
#Look at it
summary(fixed)
random.intercepts <- lmer(RT ~ 1 + Category + (1|Subject), data = data)
#You can look at the value of the intercept for each participant using ranef() (RANdom EFfects)
#These are in relation to the model's intercept (add or subtract from the (Intercept) value returned by summary())
ranef(random.intercepts)
random.slopes <- lmer(RT ~ 1 + Category + (Item|Subject), data = data)
#Look at random effect values
ranef(random.slopes)
b0 <- input$Intercept
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rsconnect")
library(devtools)
devtools::install_github("rstudio/shinyapps")
rsconnect::setAccountInfo(name='sarahsauve', token='A21156B956F77B0CC74D862F99745CD4', secret='IWVDiXkdc5p5QFOwVENO5TptqWZHNzdTe5FfLTmr')
runApp()
data <- read_csv("DataSimulation_RBarLME4.csv")
data <- read_csv("DataSimulation_RBarLME4.csv")
rsconnect::deployApp("C:/Sync/Sauve/MUN Postdoc/MUN_RBar_lme4ShinyApp")
rsconnect::deployApp("C:/Sync/Sauve/MUN Postdoc/MUN_RBar_lme4ShinyApp")
shiny::runApp()
library(readr)
data <- read_csv("DataSimulation_RBarLME4.csv")
View(data)
#======================================================================================================================================================
#Install and load lme4 package
#install.packages("lme4")
library("lme4")
library("tidyverse")
library("gganimate")
#Organized plot
dataplot <- ggplot(data, aes(x = Item, y = RT)) +
geom_point(size = 2) +
facet_grid(~ Subject) +
theme_bw()
dataplot
intercept <- lm(RT ~ 1, data = data)
#Let's look at this model
summary(intercept)
#Add its predictions to our data frame using the fitted() function
data$intercept.predictions <- fitted(intercept)
#Visualize
dataplot +
geom_point(aes(y = data$intercept.predictions), shape = "triangle", size = 4)
fixed <- lm(RT ~ 1 + Category, data = data)
#Look at it
summary(fixed)
#Add predictions to data frame
data$fixed.predictions <- fitted(fixed)
#Visualize
dataplot +
geom_point(aes(y = data$fixed.predictions), shape = "triangle", size = 4)
random.intercepts <- lmer(RT ~ 1 + Category + (1|Subject), data = data)
#Look at the model
summary(random.intercepts)
#Add predictions to data frame
data$randintercept.predictions <- fitted(random.intercepts)
#Visualize
dataplot +
geom_point(aes(y = data$randintercept.predictions), shape = "triangle", size = 4)
#Look at the model
summary(random.item.intercepts)
random.item.intercepts <- mer(RT ~ 1 + Category + (1|Subject) + (1|Item), data = data)
random.item.intercepts <- lmer(RT ~ 1 + Category + (1|Subject) + (1|Item), data = data)
#Look at the model
summary(random.item.intercepts)
#Add predictions to data frame
data$randitemintercept.predictions <- fitted(random.item.intercepts)
#Visualize
dataplot +
geom_point(aes(y = data$randitemintercept.predictions), shape = "triangle", size = 4)
random.slopes <- lmer(RT ~ 1 + Category + (Category|Subject) + (1|Item), data = data)
#Look at the model
summary(random.slopes)
#Add predictions to data frame
data$randslope.predictions <- fitted(random.slopes)
#Visualize
dataplot +
geom_point(aes(y = data$randslope.predictions), shape = "triangle", size = 4)
View(data)
write_csv(data, "testlong.csv")
runApp()
